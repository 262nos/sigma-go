// Code generated by github.com/bradleyjkemp/sigma-go/sigmac DO NOT EDIT.
package testdata

import (
	sigma "github.com/bradleyjkemp/sigma-go"

	"sort"
)

var Rules = map[string]sigma.Rule{}

var Configs []sigma.Config

func registerRule(rule sigma.Rule) {
	id := rule.ID
	if id == "" {
		id = "MISSING_ID_" + rule.Title
	}

	if _, ok := Rules[id]; ok {
		panic("rule with id " + id + " already registered")
	}
	Rules[id] = rule
}

func registerConfig(config sigma.Config) {
	Configs = append(Configs, config)
	sort.Slice(Configs, func(i, j int) bool {
		return Configs[i].Order < Configs[j].Order
	})
}

func init() {
	registerRule(sigma.Rule{
		Title: "APT40 Dropbox Tool User Agent",
		Logsource: sigma.Logsource{
			Category:   "proxy",
			Product:    "",
			Service:    "",
			Definition: "",
		},
		Detection: sigma.Detection{
			Searches: map[string]sigma.Search{
				"selection": sigma.Search{
					FieldMatchers: []sigma.FieldMatcher{
						sigma.FieldMatcher{
							Field: "c-useragent",
							Values: []string{
								"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36",
							},
						},
						sigma.FieldMatcher{
							Field: "r-dns",
							Values: []string{
								"api.dropbox.com",
							},
						},
					},
				},
			},
			Conditions: sigma.Conditions{
				sigma.Condition{
					Search: sigma.SearchIdentifier{
						Name: "selection",
					},
					Aggregation: nil,
				},
			},
			Timeframe: 0,
		},
		ID:          "5ba715b6-71b7-44fd-8245-f66893e81b3d",
		Status:      "experimental",
		Description: "Detects suspicious user agent string of APT40 Dropbox tool",
		Author:      "Thomas Patzke",
		References: []string{
			"Internal research from Florian Roth",
		},
		AdditionalFields: map[string]interface{}{
			"date": "2019/11/12",
			"falsepositives": []interface{}{
				"Old browsers",
			},
			"fields": []interface{}{
				"c-ip",
				"c-uri",
			},
			"level":    "high",
			"modified": "2020/09/02",
			"tags": []interface{}{
				"attack.command_and_control",
				"attack.t1071.001",
				"attack.t1043",
				"attack.exfiltration",
				"attack.t1567.002",
				"attack.t1048",
			},
		},
	})

	registerConfig(sigma.Config{
		Title:         "Conversion of Generic Rules into Sysmon Specific Rules",
		Order:         10,
		FieldMappings: map[string]sigma.FieldMapping{},
		Logsources: map[string]sigma.LogsourceMapping{
			"dns_query": sigma.LogsourceMapping{
				Logsource: sigma.Logsource{
					Category:   "dns_query",
					Product:    "windows",
					Service:    "",
					Definition: "",
				},
				Conditions: sigma.Search{
					FieldMatchers: []sigma.FieldMatcher{
						sigma.FieldMatcher{
							Field: "EventID",
							Values: []string{
								"22",
							},
						},
					},
				},
				Rewrite: sigma.Logsource{
					Category:   "",
					Product:    "windows",
					Service:    "sysmon",
					Definition: "",
				},
			},
			"driver_loaded": sigma.LogsourceMapping{
				Logsource: sigma.Logsource{
					Category:   "driver_load",
					Product:    "windows",
					Service:    "",
					Definition: "",
				},
				Conditions: sigma.Search{
					FieldMatchers: []sigma.FieldMatcher{
						sigma.FieldMatcher{
							Field: "EventID",
							Values: []string{
								"6",
							},
						},
					},
				},
				Rewrite: sigma.Logsource{
					Category:   "",
					Product:    "windows",
					Service:    "sysmon",
					Definition: "",
				},
			},
			"file_creation": sigma.LogsourceMapping{
				Logsource: sigma.Logsource{
					Category:   "file_event",
					Product:    "windows",
					Service:    "",
					Definition: "",
				},
				Conditions: sigma.Search{
					FieldMatchers: []sigma.FieldMatcher{
						sigma.FieldMatcher{
							Field: "EventID",
							Values: []string{
								"11",
							},
						},
					},
				},
				Rewrite: sigma.Logsource{
					Category:   "",
					Product:    "windows",
					Service:    "sysmon",
					Definition: "",
				},
			},
			"image_loaded": sigma.LogsourceMapping{
				Logsource: sigma.Logsource{
					Category:   "image_load",
					Product:    "windows",
					Service:    "",
					Definition: "",
				},
				Conditions: sigma.Search{
					FieldMatchers: []sigma.FieldMatcher{
						sigma.FieldMatcher{
							Field: "EventID",
							Values: []string{
								"7",
							},
						},
					},
				},
				Rewrite: sigma.Logsource{
					Category:   "",
					Product:    "windows",
					Service:    "sysmon",
					Definition: "",
				},
			},
			"network_connection": sigma.LogsourceMapping{
				Logsource: sigma.Logsource{
					Category:   "network_connection",
					Product:    "windows",
					Service:    "",
					Definition: "",
				},
				Conditions: sigma.Search{
					FieldMatchers: []sigma.FieldMatcher{
						sigma.FieldMatcher{
							Field: "EventID",
							Values: []string{
								"3",
							},
						},
					},
				},
				Rewrite: sigma.Logsource{
					Category:   "",
					Product:    "windows",
					Service:    "sysmon",
					Definition: "",
				},
			},
			"process_access": sigma.LogsourceMapping{
				Logsource: sigma.Logsource{
					Category:   "process_access",
					Product:    "windows",
					Service:    "",
					Definition: "",
				},
				Conditions: sigma.Search{
					FieldMatchers: []sigma.FieldMatcher{
						sigma.FieldMatcher{
							Field: "EventID",
							Values: []string{
								"10",
							},
						},
					},
				},
				Rewrite: sigma.Logsource{
					Category:   "",
					Product:    "windows",
					Service:    "sysmon",
					Definition: "",
				},
			},
			"process_creation": sigma.LogsourceMapping{
				Logsource: sigma.Logsource{
					Category:   "process_creation",
					Product:    "windows",
					Service:    "",
					Definition: "",
				},
				Conditions: sigma.Search{
					FieldMatchers: []sigma.FieldMatcher{
						sigma.FieldMatcher{
							Field: "EventID",
							Values: []string{
								"1",
							},
						},
					},
				},
				Rewrite: sigma.Logsource{
					Category:   "",
					Product:    "windows",
					Service:    "sysmon",
					Definition: "",
				},
			},
			"process_terminated": sigma.LogsourceMapping{
				Logsource: sigma.Logsource{
					Category:   "process_termination",
					Product:    "windows",
					Service:    "",
					Definition: "",
				},
				Conditions: sigma.Search{
					FieldMatchers: []sigma.FieldMatcher{
						sigma.FieldMatcher{
							Field: "EventID",
							Values: []string{
								"5",
							},
						},
					},
				},
				Rewrite: sigma.Logsource{
					Category:   "",
					Product:    "windows",
					Service:    "sysmon",
					Definition: "",
				},
			},
			"registry_event": sigma.LogsourceMapping{
				Logsource: sigma.Logsource{
					Category:   "registry_event",
					Product:    "windows",
					Service:    "",
					Definition: "",
				},
				Conditions: sigma.Search{
					FieldMatchers: []sigma.FieldMatcher{
						sigma.FieldMatcher{
							Field: "EventID",
							Values: []string{
								"12",
								"13",
								"14",
							},
						},
					},
				},
				Rewrite: sigma.Logsource{
					Category:   "",
					Product:    "windows",
					Service:    "sysmon",
					Definition: "",
				},
			},
		},
		DefaultIndex: "",
		Placeholders: map[string][]interface{}{},
	})

}
